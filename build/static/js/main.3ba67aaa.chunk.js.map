{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","src","poster_path","backdrop_path","alt","name","key","id","onClick","log","original_name","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","String","catch","err","handleClick","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentariesMovies","Banner","str","max","setMovie","Math","floor","random","length","classname","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ba67aaa.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//The instance will use the baseURL whenever it is used and you can append the end\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport \"./Row.css\"\r\nimport YouTube from \"react-youtube\"\r\nimport movieTrailer from 'movie-trailer'\r\nimport axios from './axios';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }){\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            //console.log(request.data.results);\r\n            setMovies(request.data.results)\r\n            return request;\r\n            //Movies are at request.data.results\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars:{\r\n            autoplay: 1\r\n        }\r\n    };\r\n    \r\n    const handleClick = (movie) =>{\r\n        if(trailerUrl != ''){\r\n            setTrailerUrl('')\r\n        }\r\n        else{\r\n            //This portion is getting the video id from YouTube\r\n            console.log(movie?.title || movie?.name || movie?.original_name || \"\")\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name || \"\")\r\n            .then((url) => {\r\n                console.log(url)\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'))\r\n                console.log(\"this is the url params\" + String(urlParams.get('v')))\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    //Fetch URL is a dependency in useEffect so must go inside []\r\n    console.table(movies)\r\n    return(\r\n        <div className = \"row\">\r\n            <h2>{title}</h2>\r\n            <div className = \"row_posters\">\r\n                {movies.map(movie => (\r\n                    <\r\n                        img src = {`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \r\n                        alt = {movie.name}\r\n                        key={movie.id}\r\n                        className = {isLargeRow ? \"row_poster row_posterLarge\" : \"row_poster\"}\r\n                        onClick = {() => handleClick(movie)}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","const API_KEY = \"dc0b1fc231ef9c8605469c32471b28e9\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentariesMovies: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport requests from './request'\r\nimport \"./Banner.css\"\r\n\r\nfunction Banner(){\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            //Random movie here for the banner\r\n            setMovie(\r\n                request.data.results[Math.floor(Math.random() * request.data.results.length)]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie)\r\n\r\n\r\n    function truncate(str, max) {\r\n        return str?.length > max ? str.substr(0, max-1) + 'â€¦' : str;\r\n    }\r\n\r\n    return(\r\n        <header classname = \"banner\"\r\n            style = {{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition: \"center center\"\r\n            }}\r\n        >\r\n            <div className = \"banner_contents\">\r\n                {/*title*/}\r\n                <h1 className = \"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className = \"banner_buttons\">\r\n                    <button className = \"banner_button\">Play</button>\r\n                    <button className = \"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className = \"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner","import React, { useEffect, useState } from 'react'\r\nimport './Nav.css'\r\n\r\n\r\nfunction Nav(){\r\n    const [show, handleShow] = useState(false)\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\", ()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true)\r\n            }\r\n            else{\r\n                handleShow(false)\r\n            }\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <div className = {`nav ${show && \"nav_black\"}`}>\r\n            <img\r\n                className=\"nav_logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img\r\n                className=\"nav_avatar\"\r\n                src=\"https://i.pinimg.com/originals/fb/8e/8a/fb8e8a96fca2f049334f312086a6e2f6.png\"\r\n                alt=\"Avatar Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport Row from './Row';\nimport Banner from './Banner'\nimport requests from './request'\nimport Nav from './Nav'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav Bar */}\n      <Nav/>\n      <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl = {requests.fetchNetflixOriginals} isLargeRow = {1} />\n      <Row title=\"Trending Now\" fetchUrl = {requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl = {requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies} />\n      <Row title=\"Horrow Movies\" fetchUrl = {requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl = {requests.fetchDocumentariesMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}